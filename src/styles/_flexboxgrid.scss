@use "sass:math";
@use "sass:list";
@use "lib/mixins" as mixins;

$gutter: 16px;
$gutters: $gutter * 2;
$sizes: (
    mobile: xs,
    tablet: sm,
    desktop: md,
    desktop-large: lg,
);

.container {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
    padding-right: $gutter;
    padding-left: $gutter;

    @include mixins.bp(tablet) {
        max-width: 752px;
    }

    @include mixins.bp(tablet-large) {
        max-width: 942px;
    }

    @include mixins.bp(desktop) {
        max-width: 976px;
    }

    @include mixins.bp(desktop-large) {
        max-width: 1140px;
    }
}

.flex {
    display: flex;
}

.row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: -$gutter;
    margin-left: -$gutter;
    max-width: 100vw;

    &.reverse {
        flex-direction: row-reverse;
    }
}

.col {
    flex: 1;
    max-width: 100%;

    &.reverse {
        flex-direction: column-reverse;
    }
}

[class^="col-"],
[class*=" col-"] {
    position: relative;
    box-sizing: border-box;
    flex: 0 0 auto;
    padding-right: $gutter;
    padding-left: $gutter;
}

@each $size in $sizes {
    @include mixins.bp(list.nth($size, 1)) {
        .flex-#{list.nth($size,2)} {
            display: flex;
        }

        .col-#{list.nth($size, 2)} {
            flex-grow: 1;
            flex-basis: 0;
            max-width: 100%;
        }

        .row.reverse-#{list.nth($size, 2)} {
            flex-direction: row-reverse;
        }

        .col.reverse-#{list.nth($size, 2)} {
            flex-direction: column-reverse;
        }

        .start-#{list.nth($size, 2)} {
            justify-content: flex-start;
            text-align: start;
        }

        .center-#{list.nth($size, 2)} {
            justify-content: center;
            text-align: center;
        }

        .end-#{list.nth($size, 2)} {
            justify-content: flex-end;
            text-align: end;
        }

        .top-#{list.nth($size, 2)} {
            align-items: flex-start;
        }

        .middle-#{list.nth($size, 2)} {
            align-items: center;
        }

        .bottom-#{list.nth($size, 2)} {
            align-items: flex-end;
        }

        .around-#{list.nth($size, 2)} {
            justify-content: space-around;
        }

        .between-#{list.nth($size, 2)} {
            justify-content: space-between;
        }

        .first-#{list.nth($size, 2)} {
            order: -1;
        }

        .last-#{list.nth($size, 2)} {
            order: 1;
        }
    }
}

@for $i from 0 through 12 {
    .col-#{$i} {
        box-sizing: border-box;
        flex: 0 0 auto;
        flex-basis: math.div(1, 12) * $i * 100%;
        max-width: math.div(1, 12) * $i * 100%;
        padding-right: $gutter;
        padding-left: $gutter;
    }
}

@each $size in $sizes {
    @include mixins.bp(list.nth($size, 1)) {
        @for $i from 0 through 12 {
            .col-#{list.nth($size, 2)}-#{$i} {
                box-sizing: border-box;
                flex: 0 0 auto;
                flex-basis: math.div(1, 12) * $i * 100%;
                max-width: math.div(1, 12) * $i * 100%;
                padding-right: $gutter;
                padding-left: $gutter;
            }

            .col-#{list.nth($size, 2)}-push-#{$i} {
                left: calc(#{math.div(1, 12) * $i * 100%});
            }

            .col-#{list.nth($size, 2)}-pull-#{$i} {
                right: calc(#{math.div(1, 12) * $i * 100%});
            }
        }
    }
}